{"ast":null,"code":"var _jsxFileName = \"/Users/daminisingla/Desktop/news_frontend/frontend/src/components/Message.js\";\nimport React from 'react';\nimport './Message.scss';\n\n// This component handles displaying individual chat messages\n// It can show both user messages and bot responses with citations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = ({\n  message\n}) => {\n  // Figure out what type of message this is\n  const isUser = message.role === 'user'; // Is this from the user or the bot?\n  const isError = message.isError; // Did something go wrong?\n\n  // Convert timestamp to readable time format (like \"2:30 PM\")\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // When user clicks a citation number, scroll to that source\n  const scrollToCitation = citationNumber => {\n    // Find the citation element by its ID (unique per message)\n    const citationElement = document.getElementById(`citation-${message.id}-${citationNumber}`);\n    if (citationElement) {\n      // Smoothly scroll to the citation\n      citationElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n\n      // Add a temporary highlight effect so user knows which one they clicked\n      citationElement.classList.add('citation-highlight');\n      // Remove the highlight after 2 seconds\n      setTimeout(() => {\n        citationElement.classList.remove('citation-highlight');\n      }, 2000);\n    }\n  };\n\n  // This function makes citation numbers clickable and pretty\n  const renderMessageText = text => {\n    // Don't process user messages or empty text\n    if (!text || isUser) {\n      return text;\n    }\n\n    // Look for citation patterns like [1], [2], [3, 5], [2, 7] in the text\n    // The regex finds square brackets with numbers and commas inside\n    const citationRegex = /\\[([\\d,\\s]+)\\]/g;\n    // Split the text into parts - citation numbers will be separate\n    const parts = text.split(citationRegex);\n\n    // Go through each part and make citation numbers clickable\n    return parts.map((part, index) => {\n      // Odd indices are the citation numbers (due to how split works)\n      if (index % 2 === 1) {\n        // Extract individual numbers from complex citations like \"3, 5\" or \"2, 7\"\n        const numbers = part.split(',').map(num => parseInt(num.trim())).filter(num => !isNaN(num));\n        const firstNumber = numbers[0]; // Use the first number for scrolling\n\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"citation-number\",\n          onClick: () => scrollToCitation(firstNumber),\n          title: `Click to view source ${firstNumber}`,\n          children: [\"[\", part, \"]\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n      }\n      // Regular text parts just get returned as-is\n      return part;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${isUser ? 'user' : 'bot'} ${isError ? 'error' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-text\",\n        children: renderMessageText(message.text)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), message.citations && message.citations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"citations\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"citations-header\",\n          children: \"Sources:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), message.citations.map((citation, index) => {\n          // Use the citation's actual number if it has one, otherwise use index + 1\n          const citationNumber = citation.number || index + 1;\n          return /*#__PURE__*/_jsxDEV(\"a\", {\n            id: `citation-${message.id}-${citationNumber}` // This ID is used for scrolling (unique per message)\n            ,\n            href: citation.url,\n            target: \"_blank\" // Open in new tab\n            ,\n            rel: \"noopener noreferrer\" // Security thing\n            ,\n            className: \"citation-link\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"citation-index\",\n              children: [\"[\", citationNumber, \"]\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), citation.title, citation.score && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"citation-score\",\n              children: [\"(\", Math.round(citation.score * 100), \"% match)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-time\",\n        children: formatTime(message.timestamp)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Message","message","isUser","role","isError","formatTime","timestamp","Date","toLocaleTimeString","hour","minute","scrollToCitation","citationNumber","citationElement","document","getElementById","id","scrollIntoView","behavior","block","classList","add","setTimeout","remove","renderMessageText","text","citationRegex","parts","split","map","part","index","numbers","num","parseInt","trim","filter","isNaN","firstNumber","className","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","citations","length","citation","number","href","url","target","rel","score","Math","round","_c","$RefreshReg$"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/components/Message.js"],"sourcesContent":["import React from 'react';\nimport './Message.scss';\n\n// This component handles displaying individual chat messages\n// It can show both user messages and bot responses with citations\nconst Message = ({ message }) => {\n  // Figure out what type of message this is\n  const isUser = message.role === 'user';  // Is this from the user or the bot?\n  const isError = message.isError;         // Did something go wrong?\n\n  // Convert timestamp to readable time format (like \"2:30 PM\")\n  const formatTime = (timestamp) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  // When user clicks a citation number, scroll to that source\n  const scrollToCitation = (citationNumber) => {\n    // Find the citation element by its ID (unique per message)\n    const citationElement = document.getElementById(`citation-${message.id}-${citationNumber}`);\n    if (citationElement) {\n      // Smoothly scroll to the citation\n      citationElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n     \n      // Add a temporary highlight effect so user knows which one they clicked\n      citationElement.classList.add('citation-highlight');\n      // Remove the highlight after 2 seconds\n      setTimeout(() => {\n        citationElement.classList.remove('citation-highlight');\n      }, 2000);\n    }\n  };\n\n  // This function makes citation numbers clickable and pretty\n  const renderMessageText = (text) => {\n    // Don't process user messages or empty text\n    if (!text || isUser) {\n      return text;\n    }\n\n    // Look for citation patterns like [1], [2], [3, 5], [2, 7] in the text\n    // The regex finds square brackets with numbers and commas inside\n    const citationRegex = /\\[([\\d,\\s]+)\\]/g;\n    // Split the text into parts - citation numbers will be separate\n    const parts = text.split(citationRegex);\n    \n    // Go through each part and make citation numbers clickable\n    return parts.map((part, index) => {\n      // Odd indices are the citation numbers (due to how split works)\n      if (index % 2 === 1) {\n        // Extract individual numbers from complex citations like \"3, 5\" or \"2, 7\"\n        const numbers = part.split(',').map(num => parseInt(num.trim())).filter(num => !isNaN(num));\n        const firstNumber = numbers[0]; // Use the first number for scrolling\n        \n        return (\n          <span\n            key={index}\n            className=\"citation-number\"\n            onClick={() => scrollToCitation(firstNumber)}\n            title={`Click to view source ${firstNumber}`}\n          >\n            [{part}]\n          </span>\n        );\n      }\n      // Regular text parts just get returned as-is\n      return part;\n    });\n  };\n\n  return (\n    <div className={`message ${isUser ? 'user' : 'bot'} ${isError ? 'error' : ''}`}>\n      <div className=\"message-content\">\n        {/* Display the actual message text with clickable citations */}\n        <div className=\"message-text\">\n          {renderMessageText(message.text)}\n        </div>\n        \n        {/* Show sources if the bot provided any citations */}\n        {message.citations && message.citations.length > 0 && (\n          <div className=\"citations\">\n            <div className=\"citations-header\">Sources:</div>\n            {message.citations.map((citation, index) => {\n              // Use the citation's actual number if it has one, otherwise use index + 1\n              const citationNumber = citation.number || (index + 1);\n              return (\n                <a\n                  key={index}\n                  id={`citation-${message.id}-${citationNumber}`}  // This ID is used for scrolling (unique per message)\n                  href={citation.url}\n                  target=\"_blank\"  // Open in new tab\n                  rel=\"noopener noreferrer\"  // Security thing\n                  className=\"citation-link\"\n                >\n                  <span className=\"citation-index\">[{citationNumber}]</span>\n                  {citation.title}\n                  {/* Show match percentage if available */}\n                  {citation.score && (\n                    <span className=\"citation-score\">\n                      ({Math.round(citation.score * 100)}% match)\n                    </span>\n                  )}\n                </a>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Show when the message was sent */}\n        <div className=\"message-time\">\n          {formatTime(message.timestamp)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}