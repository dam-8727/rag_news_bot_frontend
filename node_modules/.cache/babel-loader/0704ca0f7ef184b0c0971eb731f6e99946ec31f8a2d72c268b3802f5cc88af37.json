{"ast":null,"code":"// This is where we connect to our backend API\nconst API_BASE_URL = 'https://rag-news-bot-backend.onrender.com';\n\n// This class handles all communication with the backend\nclass ApiService {\n  // Send a message to the bot and get a response\n  async sendMessage(sessionId, message) {\n    try {\n      // Make a POST request to the chat endpoint\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionId,\n          message\n        }) // Send session ID and user message\n      });\n\n      // Check if the request was successful\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Return the bot's response as JSON\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  // Get the chat history for a specific session\n  async getSessionHistory(sessionId) {\n    try {\n      // Make a GET request to fetch previous messages\n      const response = await fetch(`${API_BASE_URL}/api/session/${sessionId}/history`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n      throw error;\n    }\n  }\n\n  // Clear all messages from a session (start fresh)\n  async resetSession(sessionId) {\n    try {\n      // Make a DELETE request to clear the session\n      const response = await fetch(`${API_BASE_URL}/api/session/${sessionId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error resetting session:', error);\n      throw error;\n    }\n  }\n\n  // Check if the backend server is running and healthy\n  async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return response.ok; // Returns true if server is healthy\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false; // Server is not responding\n    }\n  }\n}\n\n// Export a single instance of the API service (singleton pattern)\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","sendMessage","sessionId","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","getSessionHistory","resetSession","checkHealth"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/services/api.js"],"sourcesContent":["// This is where we connect to our backend API\nconst API_BASE_URL = 'https://rag-news-bot-backend.onrender.com';\n\n// This class handles all communication with the backend\nclass ApiService {\n  // Send a message to the bot and get a response\n  async sendMessage(sessionId, message) {\n    try {\n      // Make a POST request to the chat endpoint\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId, message }),  // Send session ID and user message\n      });\n\n      // Check if the request was successful\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Return the bot's response as JSON\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  // Get the chat history for a specific session\n  async getSessionHistory(sessionId) {\n    try {\n      // Make a GET request to fetch previous messages\n      const response = await fetch(`${API_BASE_URL}/api/session/${sessionId}/history`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n      throw error;\n    }\n  }\n\n  // Clear all messages from a session (start fresh)\n  async resetSession(sessionId) {\n    try {\n      // Make a DELETE request to clear the session\n      const response = await fetch(`${API_BASE_URL}/api/session/${sessionId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error resetting session:', error);\n      throw error;\n    }\n  }\n\n  // Check if the backend server is running and healthy\n  async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return response.ok;  // Returns true if server is healthy\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;  // Server is not responding\n    }\n  }\n}\n\n// Export a single instance of the API service (singleton pattern)\nexport default new ApiService();\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,2CAA2C;;AAEhE;AACA,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,WAAWA,CAACC,SAAS,EAAEC,OAAO,EAAE;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,WAAW,EAAE;QACvDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,SAAS;UAAEC;QAAQ,CAAC,CAAC,CAAG;MACjD,CAAC,CAAC;;MAEF;MACA,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;;MAEA;MACA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,iBAAiBA,CAACf,SAAS,EAAE;IACjC,IAAI;MACF;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,gBAAgBG,SAAS,UAAU,CAAC;MAEhF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMG,YAAYA,CAAChB,SAAS,EAAE;IAC5B,IAAI;MACF;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,gBAAgBG,SAAS,EAAE,EAAE;QACvEI,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMI,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,SAAS,CAAC;MACtD,OAAOK,QAAQ,CAACO,EAAE,CAAC,CAAE;IACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,KAAK,CAAC,CAAE;IACjB;EACF;AACF;;AAEA;AACA,eAAe,IAAIf,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}