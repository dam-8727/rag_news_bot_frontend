{"ast":null,"code":"import React from'react';import'./Message.scss';// This component handles displaying individual chat messages\n// It can show both user messages and bot responses with citations\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Message=_ref=>{let{message}=_ref;// Figure out what type of message this is\nconst isUser=message.role==='user';// Is this from the user or the bot?\nconst isError=message.isError;// Did something go wrong?\n// Convert timestamp to readable time format (like \"2:30 PM\")\nconst formatTime=timestamp=>{// Check if timestamp is valid\nif(!timestamp){return'Just now';}const date=new Date(timestamp);// Check if the date is valid\nif(isNaN(date.getTime())){return'Just now';}return date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});};// When user clicks a citation number, scroll to that source\nconst scrollToCitation=citationNumber=>{// Find the citation element by its ID (unique per message)\nconst citationElement=document.getElementById(\"citation-\".concat(message.id,\"-\").concat(citationNumber));if(citationElement){// Smoothly scroll to the citation\ncitationElement.scrollIntoView({behavior:'smooth',block:'center'});// Add a temporary highlight effect so user knows which one they clicked\ncitationElement.classList.add('citation-highlight');// Remove the highlight after 2 seconds\nsetTimeout(()=>{citationElement.classList.remove('citation-highlight');},2000);}};// This function makes citation numbers clickable and pretty\nconst renderMessageText=text=>{// Don't process user messages or empty text\nif(!text||isUser){return text;}// Look for citation patterns like [1], [2], [3, 5], [2, 7] in the text\n// The regex finds square brackets with numbers and commas inside\nconst citationRegex=/\\[([\\d,\\s]+)\\]/g;// Split the text into parts - citation numbers will be separate\nconst parts=text.split(citationRegex);// Go through each part and make citation numbers clickable\nreturn parts.map((part,index)=>{// Odd indices are the citation numbers (due to how split works)\nif(index%2===1){// Extract individual numbers from complex citations like \"3, 5\" or \"2, 7\"\nconst numbers=part.split(',').map(num=>parseInt(num.trim())).filter(num=>!isNaN(num));const firstNumber=numbers[0];// Use the first number for scrolling\nreturn/*#__PURE__*/_jsxs(\"span\",{className:\"citation-number\",onClick:()=>scrollToCitation(firstNumber),title:\"Click to view source \".concat(firstNumber),children:[\"[\",part,\"]\"]},index);}// Regular text parts just get returned as-is\nreturn part;});};return/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(isUser?'user':'bot',\" \").concat(isError?'error':''),children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.text?renderMessageText(message.text):'Message content not available'}),message.citations&&message.citations.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"citations\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"citations-header\",children:\"Sources:\"}),message.citations.map((citation,index)=>{// Use the citation's actual number if it has one, otherwise use index + 1\nconst citationNumber=citation.number||index+1;return/*#__PURE__*/_jsxs(\"a\",{id:\"citation-\".concat(message.id,\"-\").concat(citationNumber)// This ID is used for scrolling (unique per message)\n,href:citation.url,target:\"_blank\"// Open in new tab\n,rel:\"noopener noreferrer\"// Security thing\n,className:\"citation-link\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"citation-index\",children:[\"[\",citationNumber,\"]\"]}),citation.title,citation.score&&/*#__PURE__*/_jsxs(\"span\",{className:\"citation-score\",children:[\"(\",Math.round(citation.score*100),\"% match)\"]})]},index);})]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:formatTime(message.timestamp)})]})});};export default Message;","map":{"version":3,"names":["React","jsxs","_jsxs","jsx","_jsx","Message","_ref","message","isUser","role","isError","formatTime","timestamp","date","Date","isNaN","getTime","toLocaleTimeString","hour","minute","scrollToCitation","citationNumber","citationElement","document","getElementById","concat","id","scrollIntoView","behavior","block","classList","add","setTimeout","remove","renderMessageText","text","citationRegex","parts","split","map","part","index","numbers","num","parseInt","trim","filter","firstNumber","className","onClick","title","children","citations","length","citation","number","href","url","target","rel","score","Math","round"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/components/Message.js"],"sourcesContent":["import React from 'react';\nimport './Message.scss';\n\n// This component handles displaying individual chat messages\n// It can show both user messages and bot responses with citations\nconst Message = ({ message }) => {\n  // Figure out what type of message this is\n  const isUser = message.role === 'user';  // Is this from the user or the bot?\n  const isError = message.isError;         // Did something go wrong?\n\n  // Convert timestamp to readable time format (like \"2:30 PM\")\n  const formatTime = (timestamp) => {\n    // Check if timestamp is valid\n    if (!timestamp) {\n      return 'Just now';\n    }\n    \n    const date = new Date(timestamp);\n    \n    // Check if the date is valid\n    if (isNaN(date.getTime())) {\n      return 'Just now';\n    }\n    \n    return date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  // When user clicks a citation number, scroll to that source\n  const scrollToCitation = (citationNumber) => {\n    // Find the citation element by its ID (unique per message)\n    const citationElement = document.getElementById(`citation-${message.id}-${citationNumber}`);\n    if (citationElement) {\n      // Smoothly scroll to the citation\n      citationElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n     \n      // Add a temporary highlight effect so user knows which one they clicked\n      citationElement.classList.add('citation-highlight');\n      // Remove the highlight after 2 seconds\n      setTimeout(() => {\n        citationElement.classList.remove('citation-highlight');\n      }, 2000);\n    }\n  };\n\n  // This function makes citation numbers clickable and pretty\n  const renderMessageText = (text) => {\n    // Don't process user messages or empty text\n    if (!text || isUser) {\n      return text;\n    }\n\n    // Look for citation patterns like [1], [2], [3, 5], [2, 7] in the text\n    // The regex finds square brackets with numbers and commas inside\n    const citationRegex = /\\[([\\d,\\s]+)\\]/g;\n    // Split the text into parts - citation numbers will be separate\n    const parts = text.split(citationRegex);\n    \n    // Go through each part and make citation numbers clickable\n    return parts.map((part, index) => {\n      // Odd indices are the citation numbers (due to how split works)\n      if (index % 2 === 1) {\n        // Extract individual numbers from complex citations like \"3, 5\" or \"2, 7\"\n        const numbers = part.split(',').map(num => parseInt(num.trim())).filter(num => !isNaN(num));\n        const firstNumber = numbers[0]; // Use the first number for scrolling\n        \n        return (\n          <span\n            key={index}\n            className=\"citation-number\"\n            onClick={() => scrollToCitation(firstNumber)}\n            title={`Click to view source ${firstNumber}`}\n          >\n            [{part}]\n          </span>\n        );\n      }\n      // Regular text parts just get returned as-is\n      return part;\n    });\n  };\n\n  return (\n    <div className={`message ${isUser ? 'user' : 'bot'} ${isError ? 'error' : ''}`}>\n      <div className=\"message-content\">\n        {/* Display the actual message text with clickable citations */}\n        <div className=\"message-text\">\n          {message.text ? renderMessageText(message.text) : 'Message content not available'}\n        </div>\n        \n        {/* Show sources if the bot provided any citations */}\n        {message.citations && message.citations.length > 0 && (\n          <div className=\"citations\">\n            <div className=\"citations-header\">Sources:</div>\n            {message.citations.map((citation, index) => {\n              // Use the citation's actual number if it has one, otherwise use index + 1\n              const citationNumber = citation.number || (index + 1);\n              return (\n                <a\n                  key={index}\n                  id={`citation-${message.id}-${citationNumber}`}  // This ID is used for scrolling (unique per message)\n                  href={citation.url}\n                  target=\"_blank\"  // Open in new tab\n                  rel=\"noopener noreferrer\"  // Security thing\n                  className=\"citation-link\"\n                >\n                  <span className=\"citation-index\">[{citationNumber}]</span>\n                  {citation.title}\n                  {/* Show match percentage if available */}\n                  {citation.score && (\n                    <span className=\"citation-score\">\n                      ({Math.round(citation.score * 100)}% match)\n                    </span>\n                  )}\n                </a>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Show when the message was sent */}\n        <div className=\"message-time\">\n          {formatTime(message.timestamp)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,gBAAgB,CAEvB;AACA;AAAA,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,OAAO,CAAGC,IAAA,EAAiB,IAAhB,CAAEC,OAAQ,CAAC,CAAAD,IAAA,CAC1B;AACA,KAAM,CAAAE,MAAM,CAAGD,OAAO,CAACE,IAAI,GAAK,MAAM,CAAG;AACzC,KAAM,CAAAC,OAAO,CAAGH,OAAO,CAACG,OAAO,CAAU;AAEzC;AACA,KAAM,CAAAC,UAAU,CAAIC,SAAS,EAAK,CAChC;AACA,GAAI,CAACA,SAAS,CAAE,CACd,MAAO,UAAU,CACnB,CAEA,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,SAAS,CAAC,CAEhC;AACA,GAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAAE,CACzB,MAAO,UAAU,CACnB,CAEA,MAAO,CAAAH,IAAI,CAACI,kBAAkB,CAAC,EAAE,CAAE,CACjCC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SACV,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,gBAAgB,CAAIC,cAAc,EAAK,CAC3C;AACA,KAAM,CAAAC,eAAe,CAAGC,QAAQ,CAACC,cAAc,aAAAC,MAAA,CAAalB,OAAO,CAACmB,EAAE,MAAAD,MAAA,CAAIJ,cAAc,CAAE,CAAC,CAC3F,GAAIC,eAAe,CAAE,CACnB;AACAA,eAAe,CAACK,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAQ,CAAEC,KAAK,CAAE,QAAS,CAAC,CAAC,CAEvE;AACAP,eAAe,CAACQ,SAAS,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACnD;AACAC,UAAU,CAAC,IAAM,CACfV,eAAe,CAACQ,SAAS,CAACG,MAAM,CAAC,oBAAoB,CAAC,CACxD,CAAC,CAAE,IAAI,CAAC,CACV,CACF,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAIC,IAAI,EAAK,CAClC;AACA,GAAI,CAACA,IAAI,EAAI3B,MAAM,CAAE,CACnB,MAAO,CAAA2B,IAAI,CACb,CAEA;AACA;AACA,KAAM,CAAAC,aAAa,CAAG,iBAAiB,CACvC;AACA,KAAM,CAAAC,KAAK,CAAGF,IAAI,CAACG,KAAK,CAACF,aAAa,CAAC,CAEvC;AACA,MAAO,CAAAC,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CAChC;AACA,GAAIA,KAAK,CAAG,CAAC,GAAK,CAAC,CAAE,CACnB;AACA,KAAM,CAAAC,OAAO,CAAGF,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACI,GAAG,EAAIC,QAAQ,CAACD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,CAACH,GAAG,EAAI,CAAC5B,KAAK,CAAC4B,GAAG,CAAC,CAAC,CAC3F,KAAM,CAAAI,WAAW,CAAGL,OAAO,CAAC,CAAC,CAAC,CAAE;AAEhC,mBACExC,KAAA,SAEE8C,SAAS,CAAC,iBAAiB,CAC3BC,OAAO,CAAEA,CAAA,GAAM7B,gBAAgB,CAAC2B,WAAW,CAAE,CAC7CG,KAAK,yBAAAzB,MAAA,CAA0BsB,WAAW,CAAG,CAAAI,QAAA,EAC9C,GACE,CAACX,IAAI,CAAC,GACT,GANOC,KAMD,CAAC,CAEX,CACA;AACA,MAAO,CAAAD,IAAI,CACb,CAAC,CAAC,CACJ,CAAC,CAED,mBACEpC,IAAA,QAAK4C,SAAS,YAAAvB,MAAA,CAAajB,MAAM,CAAG,MAAM,CAAG,KAAK,MAAAiB,MAAA,CAAIf,OAAO,CAAG,OAAO,CAAG,EAAE,CAAG,CAAAyC,QAAA,cAC7EjD,KAAA,QAAK8C,SAAS,CAAC,iBAAiB,CAAAG,QAAA,eAE9B/C,IAAA,QAAK4C,SAAS,CAAC,cAAc,CAAAG,QAAA,CAC1B5C,OAAO,CAAC4B,IAAI,CAAGD,iBAAiB,CAAC3B,OAAO,CAAC4B,IAAI,CAAC,CAAG,+BAA+B,CAC9E,CAAC,CAGL5B,OAAO,CAAC6C,SAAS,EAAI7C,OAAO,CAAC6C,SAAS,CAACC,MAAM,CAAG,CAAC,eAChDnD,KAAA,QAAK8C,SAAS,CAAC,WAAW,CAAAG,QAAA,eACxB/C,IAAA,QAAK4C,SAAS,CAAC,kBAAkB,CAAAG,QAAA,CAAC,UAAQ,CAAK,CAAC,CAC/C5C,OAAO,CAAC6C,SAAS,CAACb,GAAG,CAAC,CAACe,QAAQ,CAAEb,KAAK,GAAK,CAC1C;AACA,KAAM,CAAApB,cAAc,CAAGiC,QAAQ,CAACC,MAAM,EAAKd,KAAK,CAAG,CAAE,CACrD,mBACEvC,KAAA,MAEEwB,EAAE,aAAAD,MAAA,CAAclB,OAAO,CAACmB,EAAE,MAAAD,MAAA,CAAIJ,cAAc,CAAK;AAAA,CACjDmC,IAAI,CAAEF,QAAQ,CAACG,GAAI,CACnBC,MAAM,CAAC,QAAU;AAAA,CACjBC,GAAG,CAAC,qBAAuB;AAAA,CAC3BX,SAAS,CAAC,eAAe,CAAAG,QAAA,eAEzBjD,KAAA,SAAM8C,SAAS,CAAC,gBAAgB,CAAAG,QAAA,EAAC,GAAC,CAAC9B,cAAc,CAAC,GAAC,EAAM,CAAC,CACzDiC,QAAQ,CAACJ,KAAK,CAEdI,QAAQ,CAACM,KAAK,eACb1D,KAAA,SAAM8C,SAAS,CAAC,gBAAgB,CAAAG,QAAA,EAAC,GAC9B,CAACU,IAAI,CAACC,KAAK,CAACR,QAAQ,CAACM,KAAK,CAAG,GAAG,CAAC,CAAC,UACrC,EAAM,CACP,GAdInB,KAeJ,CAAC,CAER,CAAC,CAAC,EACC,CACN,cAGDrC,IAAA,QAAK4C,SAAS,CAAC,cAAc,CAAAG,QAAA,CAC1BxC,UAAU,CAACJ,OAAO,CAACK,SAAS,CAAC,CAC3B,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAP,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}