{"ast":null,"code":"var _jsxFileName = \"/Users/daminisingla/Desktop/news_frontend/frontend/src/components/Message.js\";\nimport React from 'react';\nimport './Message.scss';\n\n// This component handles displaying individual chat messages\n// It can show both user messages and bot responses with citations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = ({\n  message\n}) => {\n  // Figure out what type of message this is\n  const isUser = message.role === 'user'; // Is this from the user or the bot?\n  const isError = message.isError; // Did something go wrong?\n\n  // Convert timestamp to readable time format (like \"2:30 PM\")\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // When user clicks a citation number, scroll to that source\n  const scrollToCitation = citationNumber => {\n    // Find the citation element by its ID\n    const citationElement = document.getElementById(`citation-${citationNumber}`);\n    if (citationElement) {\n      // Smoothly scroll to the citation\n      citationElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n\n      // Add a temporary highlight effect so user knows which one they clicked\n      citationElement.classList.add('citation-highlight');\n      // Remove the highlight after 2 seconds\n      setTimeout(() => {\n        citationElement.classList.remove('citation-highlight');\n      }, 2000);\n    }\n  };\n\n  // This function makes citation numbers clickable and pretty\n  const renderMessageText = text => {\n    // Don't process user messages or empty text\n    if (!text || isUser) {\n      return text;\n    }\n\n    // Look for citation numbers like [1], [2], [3] in the text\n    // The regex finds square brackets with numbers inside\n    const citationRegex = /\\[(\\d+)\\]/g;\n    // Split the text into parts - citation numbers will be separate\n    const parts = text.split(citationRegex);\n\n    // Go through each part and make citation numbers clickable\n    return parts.map((part, index) => {\n      // Odd indices are the citation numbers (due to how split works)\n      if (index % 2 === 1) {\n        const citationNumber = parseInt(part);\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"citation-number\",\n          onClick: () => scrollToCitation(citationNumber),\n          title: `Click to view source ${citationNumber}`,\n          children: [\"[\", part, \"]\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      }\n      // Regular text parts just get returned as-is\n      return part;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${isUser ? 'user' : 'bot'} ${isError ? 'error' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-text\",\n        children: renderMessageText(message.text)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), message.citations && message.citations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"citations\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"citations-header\",\n          children: \"Sources:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), message.citations.map((citation, index) => /*#__PURE__*/_jsxDEV(\"a\", {\n          id: `citation-${index + 1}`,\n          href: citation.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"citation-link\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"citation-index\",\n            children: [\"[\", index + 1, \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this), citation.title, citation.score && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"citation-score\",\n            children: [\"(\", Math.round(citation.score * 100), \"% match)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-time\",\n        children: formatTime(message.timestamp)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Message","message","isUser","role","isError","formatTime","timestamp","Date","toLocaleTimeString","hour","minute","scrollToCitation","citationNumber","citationElement","document","getElementById","scrollIntoView","behavior","block","classList","add","setTimeout","remove","renderMessageText","text","citationRegex","parts","split","map","part","index","parseInt","className","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","citations","length","citation","id","href","url","target","rel","score","Math","round","_c","$RefreshReg$"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/components/Message.js"],"sourcesContent":["import React from 'react';\nimport './Message.scss';\n\n// This component handles displaying individual chat messages\n// It can show both user messages and bot responses with citations\nconst Message = ({ message }) => {\n  // Figure out what type of message this is\n  const isUser = message.role === 'user';  // Is this from the user or the bot?\n  const isError = message.isError;         // Did something go wrong?\n\n  // Convert timestamp to readable time format (like \"2:30 PM\")\n  const formatTime = (timestamp) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  // When user clicks a citation number, scroll to that source\n  const scrollToCitation = (citationNumber) => {\n    // Find the citation element by its ID\n    const citationElement = document.getElementById(`citation-${citationNumber}`);\n    if (citationElement) {\n      // Smoothly scroll to the citation\n      citationElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n     \n      // Add a temporary highlight effect so user knows which one they clicked\n      citationElement.classList.add('citation-highlight');\n      // Remove the highlight after 2 seconds\n      setTimeout(() => {\n        citationElement.classList.remove('citation-highlight');\n      }, 2000);\n    }\n  };\n\n  // This function makes citation numbers clickable and pretty\n  const renderMessageText = (text) => {\n    // Don't process user messages or empty text\n    if (!text || isUser) {\n      return text;\n    }\n\n    // Look for citation numbers like [1], [2], [3] in the text\n    // The regex finds square brackets with numbers inside\n    const citationRegex = /\\[(\\d+)\\]/g;\n    // Split the text into parts - citation numbers will be separate\n    const parts = text.split(citationRegex);\n    \n    // Go through each part and make citation numbers clickable\n    return parts.map((part, index) => {\n      // Odd indices are the citation numbers (due to how split works)\n      if (index % 2 === 1) {\n        const citationNumber = parseInt(part);\n        return (\n          <span\n            key={index}\n            className=\"citation-number\"\n            onClick={() => scrollToCitation(citationNumber)}\n            title={`Click to view source ${citationNumber}`}\n          >\n            [{part}]\n          </span>\n        );\n      }\n      // Regular text parts just get returned as-is\n      return part;\n    });\n  };\n\n  return (\n    <div className={`message ${isUser ? 'user' : 'bot'} ${isError ? 'error' : ''}`}>\n      <div className=\"message-content\">\n        <div className=\"message-text\">\n          {renderMessageText(message.text)}\n        </div>\n        \n        {message.citations && message.citations.length > 0 && (\n          <div className=\"citations\">\n            <div className=\"citations-header\">Sources:</div>\n            {message.citations.map((citation, index) => (\n              <a\n                key={index}\n                id={`citation-${index + 1}`}\n                href={citation.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"citation-link\"\n              >\n                <span className=\"citation-index\">[{index + 1}]</span>\n                {citation.title}\n                {citation.score && (\n                  <span className=\"citation-score\">\n                    ({Math.round(citation.score * 100)}% match)\n                  </span>\n                )}\n              </a>\n            ))}\n          </div>\n        )}\n        \n        <div className=\"message-time\">\n          {formatTime(message.timestamp)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}