{"ast":null,"code":"var _jsxFileName = \"/Users/daminisingla/Desktop/news_frontend/frontend/src/components/ChatScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport ResetButton from './ResetButton';\nimport TypingIndicator from './TypingIndicator';\nimport apiService from '../services/api';\nimport './ChatScreen.scss';\n\n// This is the main chat component that handles the entire conversation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatScreen = () => {\n  _s();\n  // State variables to keep track of everything\n  const [messages, setMessages] = useState([]); // All the chat messages\n  const [sessionId, setSessionId] = useState(null); // Unique ID for this chat session\n  const [isLoading, setIsLoading] = useState(false); // Is the bot thinking?\n  const [isTyping, setIsTyping] = useState(false); // Show typing animation\n  const messagesEndRef = useRef(null); // Reference to scroll to bottom\n\n  // When the component first loads, check if we have a saved chat session\n  useEffect(() => {\n    const storedSessionId = localStorage.getItem('news-session-id');\n    if (storedSessionId) {\n      // We have a previous session, load it up\n      setSessionId(storedSessionId);\n      loadSessionHistory(storedSessionId);\n    } else {\n      // No previous session, create a new one\n      const newSessionId = generateSessionId();\n      setSessionId(newSessionId);\n      localStorage.setItem('news-session-id', newSessionId);\n    }\n  }, []);\n\n  // Every time messages change, scroll to the bottom to show the latest\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Create a unique ID for this chat session\n  const generateSessionId = () => {\n    return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  };\n\n  // Load previous messages from this session\n  const loadSessionHistory = async sessionId => {\n    try {\n      const history = await apiService.getSessionHistory(sessionId);\n      if (history.messages && history.messages.length > 0) {\n        // Ensure all messages have valid timestamps\n        const messagesWithValidTimestamps = history.messages.map(message => ({\n          ...message,\n          timestamp: message.timestamp || new Date().toISOString()\n        }));\n        setMessages(messagesWithValidTimestamps);\n      }\n    } catch (error) {\n      console.error('Failed to load session history:', error);\n    }\n  };\n\n  // Scroll the chat to the bottom smoothly\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  // This function handles when the user sends a message\n  const handleSendMessage = async messageText => {\n    // Don't send empty messages or if we're already processing one\n    if (!messageText.trim() || isLoading) return;\n\n    // Create the user's message object\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      role: 'user',\n      timestamp: new Date().toISOString()\n    };\n\n    // Add the user's message to the chat immediately\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setIsTyping(true);\n    try {\n      // Send the message to the backend and get the bot's response\n      const response = await apiService.sendMessage(sessionId, messageText);\n\n      // Add a realistic delay so it feels like the bot is thinking\n      setTimeout(() => {\n        const botMessage = {\n          id: Date.now() + 1,\n          text: response.reply,\n          role: 'assistant',\n          timestamp: new Date().toISOString(),\n          citations: response.citations || [] // Include any sources the bot found\n        };\n\n        // Add the bot's response to the chat\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        setIsLoading(false);\n      }, 1000 + Math.random() * 2000); // Random delay between 1-3 seconds\n    } catch (error) {\n      // If something goes wrong, show an error message\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: 'Sorry, I encountered an error. Please try again.',\n        role: 'assistant',\n        timestamp: new Date().toISOString(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      setIsTyping(false);\n      setIsLoading(false);\n    }\n  };\n\n  // This function clears the chat and starts fresh\n  const handleResetSession = async () => {\n    if (!sessionId) return;\n    try {\n      // Tell the backend to forget this session\n      await apiService.resetSession(sessionId);\n      // Clear all messages from the screen\n      setMessages([]);\n\n      // Create a brand new session ID\n      const newSessionId = generateSessionId();\n      setSessionId(newSessionId);\n      localStorage.setItem('news-session-id', newSessionId);\n    } catch (error) {\n      console.error('Error resetting session:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"News Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ask me anything about the latest news!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n        onReset: handleResetSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), isTyping && /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        disabled: isLoading // Disable input while bot is responding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatScreen, \"WH/3FxTNW3GbbwtbPRuSeIZrSPU=\");\n_c = ChatScreen;\nexport default ChatScreen;\nvar _c;\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageList","MessageInput","ResetButton","TypingIndicator","apiService","jsxDEV","_jsxDEV","ChatScreen","_s","messages","setMessages","sessionId","setSessionId","isLoading","setIsLoading","isTyping","setIsTyping","messagesEndRef","storedSessionId","localStorage","getItem","loadSessionHistory","newSessionId","generateSessionId","setItem","scrollToBottom","Math","random","toString","substr","Date","now","history","getSessionHistory","length","messagesWithValidTimestamps","map","message","timestamp","toISOString","error","console","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","messageText","trim","userMessage","id","text","role","prev","response","sendMessage","setTimeout","botMessage","reply","citations","errorMessage","isError","handleResetSession","resetSession","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onReset","ref","onSendMessage","disabled","_c","$RefreshReg$"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/components/ChatScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport ResetButton from './ResetButton';\nimport TypingIndicator from './TypingIndicator';\nimport apiService from '../services/api';\nimport './ChatScreen.scss';\n\n// This is the main chat component that handles the entire conversation\nconst ChatScreen = () => {\n  // State variables to keep track of everything\n  const [messages, setMessages] = useState([]);        // All the chat messages\n  const [sessionId, setSessionId] = useState(null);    // Unique ID for this chat session\n  const [isLoading, setIsLoading] = useState(false);   // Is the bot thinking?\n  const [isTyping, setIsTyping] = useState(false);     // Show typing animation\n  const messagesEndRef = useRef(null);                 // Reference to scroll to bottom\n\n  // When the component first loads, check if we have a saved chat session\n  useEffect(() => {\n    const storedSessionId = localStorage.getItem('news-session-id');\n    if (storedSessionId) {\n      // We have a previous session, load it up\n      setSessionId(storedSessionId);\n      loadSessionHistory(storedSessionId);\n    } else {\n      // No previous session, create a new one\n      const newSessionId = generateSessionId();\n      setSessionId(newSessionId);\n      localStorage.setItem('news-session-id', newSessionId);\n    }\n  }, []);\n\n  // Every time messages change, scroll to the bottom to show the latest\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Create a unique ID for this chat session\n  const generateSessionId = () => {\n    return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  };\n\n  // Load previous messages from this session\n  const loadSessionHistory = async (sessionId) => {\n    try {\n      const history = await apiService.getSessionHistory(sessionId);\n      if (history.messages && history.messages.length > 0) {\n        // Ensure all messages have valid timestamps\n        const messagesWithValidTimestamps = history.messages.map(message => ({\n          ...message,\n          timestamp: message.timestamp || new Date().toISOString()\n        }));\n        setMessages(messagesWithValidTimestamps);\n      }\n    } catch (error) {\n      console.error('Failed to load session history:', error);\n    }\n  };\n\n  // Scroll the chat to the bottom smoothly\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  // This function handles when the user sends a message\n  const handleSendMessage = async (messageText) => {\n    // Don't send empty messages or if we're already processing one\n    if (!messageText.trim() || isLoading) return;\n\n    // Create the user's message object\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      role: 'user',\n      timestamp: new Date().toISOString()\n    };\n\n    // Add the user's message to the chat immediately\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setIsTyping(true);\n\n    try {\n      // Send the message to the backend and get the bot's response\n      const response = await apiService.sendMessage(sessionId, messageText);\n      \n      // Add a realistic delay so it feels like the bot is thinking\n      setTimeout(() => {\n        const botMessage = {\n          id: Date.now() + 1,\n          text: response.reply,\n          role: 'assistant',\n          timestamp: new Date().toISOString(),\n          citations: response.citations || []  // Include any sources the bot found\n        };\n        \n        // Add the bot's response to the chat\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        setIsLoading(false);\n      }, 1000 + Math.random() * 2000); // Random delay between 1-3 seconds\n\n    } catch (error) {\n      // If something goes wrong, show an error message\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: 'Sorry, I encountered an error. Please try again.',\n        role: 'assistant',\n        timestamp: new Date().toISOString(),\n        isError: true\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n      setIsTyping(false);\n      setIsLoading(false);\n    }\n  };\n\n  // This function clears the chat and starts fresh\n  const handleResetSession = async () => {\n    if (!sessionId) return;\n\n    try {\n      // Tell the backend to forget this session\n      await apiService.resetSession(sessionId);\n      // Clear all messages from the screen\n      setMessages([]);\n      \n      // Create a brand new session ID\n      const newSessionId = generateSessionId();\n      setSessionId(newSessionId);\n      localStorage.setItem('news-session-id', newSessionId);\n    } catch (error) {\n      console.error('Error resetting session:', error);\n    }\n  };\n\n  return (\n    <div className=\"chat-screen\">\n      {/* Header with title and reset button */}\n      <div className=\"chat-header\">\n        <h1>News Bot</h1>\n        <p>Ask me anything about the latest news!</p>\n        <ResetButton onReset={handleResetSession} />\n      </div>\n      \n      {/* The main chat area where messages appear */}\n      <div className=\"chat-messages\">\n        <MessageList messages={messages} />\n        {/* Show typing animation when bot is thinking */}\n        {isTyping && <TypingIndicator />}\n        {/* Invisible div to scroll to */}\n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input area where user types messages */}\n      <div className=\"chat-input\">\n        <MessageInput \n          onSendMessage={handleSendMessage} \n          disabled={isLoading}  // Disable input while bot is responding\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}