{"ast":null,"code":"// This is where we connect to our backend API\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'https://rag-news-bot-backend.onrender.com';// This class handles all communication with the backend\nclass ApiService{// Send a message to the bot and get a response\nasync sendMessage(sessionId,message){try{// Make a POST request to the chat endpoint\nconst response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({sessionId,message})// Send session ID and user message\n});// Check if the request was successful\nif(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}// Return the bot's response as JSON\nreturn await response.json();}catch(error){console.error('Error sending message:',error);throw error;}}// Get the chat history for a specific session\nasync getSessionHistory(sessionId){try{// Make a GET request to fetch previous messages\nconst response=await fetch(\"\".concat(API_BASE_URL,\"/api/session/\").concat(sessionId,\"/history\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Error fetching session history:',error);throw error;}}// Clear all messages from a session (start fresh)\nasync resetSession(sessionId){try{// Make a DELETE request to clear the session\nconst response=await fetch(\"\".concat(API_BASE_URL,\"/api/session/\").concat(sessionId),{method:'DELETE'});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Error resetting session:',error);throw error;}}// Check if the backend server is running and healthy\nasync checkHealth(){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/health\"));return response.ok;// Returns true if server is healthy\n}catch(error){console.error('Health check failed:',error);return false;// Server is not responding\n}}}// Export a single instance of the API service (singleton pattern)\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","sendMessage","sessionId","message","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","getSessionHistory","resetSession","checkHealth"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/services/api.js"],"sourcesContent":["// This is where we connect to our backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://rag-news-bot-backend.onrender.com';\n\n// This class handles all communication with the backend\nclass ApiService {\n  // Send a message to the bot and get a response\n  async sendMessage(sessionId, message) {\n    try {\n      // Make a POST request to the chat endpoint\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId, message }),  // Send session ID and user message\n      });\n\n      // Check if the request was successful\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Return the bot's response as JSON\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  // Get the chat history for a specific session\n  async getSessionHistory(sessionId) {\n    try {\n      // Make a GET request to fetch previous messages\n      const response = await fetch(`${API_BASE_URL}/api/session/${sessionId}/history`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n      throw error;\n    }\n  }\n\n  // Clear all messages from a session (start fresh)\n  async resetSession(sessionId) {\n    try {\n      // Make a DELETE request to clear the session\n      const response = await fetch(`${API_BASE_URL}/api/session/${sessionId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error resetting session:', error);\n      throw error;\n    }\n  }\n\n  // Check if the backend server is running and healthy\n  async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return response.ok;  // Returns true if server is healthy\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;  // Server is not responding\n    }\n  }\n}\n\n// Export a single instance of the API service (singleton pattern)\nexport default new ApiService();\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2CAA2C,CAEjG;AACA,KAAM,CAAAC,UAAW,CACf;AACA,KAAM,CAAAC,WAAWA,CAACC,SAAS,CAAEC,OAAO,CAAE,CACpC,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIV,YAAY,cAAa,CACvDW,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAET,SAAS,CAAEC,OAAQ,CAAC,CAAI;AACjD,CAAC,CAAC,CAEF;AACA,GAAI,CAACC,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAP,MAAA,CAAwBF,QAAQ,CAACU,MAAM,CAAE,CAAC,CAC3D,CAEA;AACA,MAAO,MAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAE,iBAAiBA,CAAChB,SAAS,CAAE,CACjC,GAAI,CACF;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIV,YAAY,kBAAAU,MAAA,CAAgBJ,SAAS,YAAU,CAAC,CAEhF,GAAI,CAACE,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAP,MAAA,CAAwBF,QAAQ,CAACU,MAAM,CAAE,CAAC,CAC3D,CAEA,MAAO,MAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAG,YAAYA,CAACjB,SAAS,CAAE,CAC5B,GAAI,CACF;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIV,YAAY,kBAAAU,MAAA,CAAgBJ,SAAS,EAAI,CACvEK,MAAM,CAAE,QACV,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAP,MAAA,CAAwBF,QAAQ,CAACU,MAAM,CAAE,CAAC,CAC3D,CAEA,MAAO,MAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAI,WAAWA,CAAA,CAAG,CAClB,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIV,YAAY,WAAS,CAAC,CACtD,MAAO,CAAAQ,QAAQ,CAACQ,EAAE,CAAG;AACvB,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,MAAK,CAAG;AACjB,CACF,CACF,CAEA;AACA,cAAe,IAAI,CAAAhB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}