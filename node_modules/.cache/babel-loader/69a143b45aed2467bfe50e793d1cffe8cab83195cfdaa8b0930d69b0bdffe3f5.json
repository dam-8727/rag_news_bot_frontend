{"ast":null,"code":"import _objectSpread from\"/Users/daminisingla/Desktop/news_frontend/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import MessageList from'./MessageList';import MessageInput from'./MessageInput';import ResetButton from'./ResetButton';import TypingIndicator from'./TypingIndicator';import apiService from'../services/api';import'./ChatScreen.scss';// This is the main chat component that handles the entire conversation\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatScreen=()=>{// State variables to keep track of everything\nconst[messages,setMessages]=useState([]);// All the chat messages\nconst[sessionId,setSessionId]=useState(null);// Unique ID for this chat session\nconst[isLoading,setIsLoading]=useState(false);// Is the bot thinking?\nconst[isTyping,setIsTyping]=useState(false);// Show typing animation\nconst messagesEndRef=useRef(null);// Reference to scroll to bottom\n// When the component first loads, check if we have a saved chat session\nuseEffect(()=>{const storedSessionId=localStorage.getItem('news-session-id');if(storedSessionId){// We have a previous session, load it up\nsetSessionId(storedSessionId);loadSessionHistory(storedSessionId);}else{// No previous session, create a new one\nconst newSessionId=generateSessionId();setSessionId(newSessionId);localStorage.setItem('news-session-id',newSessionId);}},[]);// Every time messages change, scroll to the bottom to show the latest\nuseEffect(()=>{scrollToBottom();},[messages]);// Create a unique ID for this chat session\nconst generateSessionId=()=>{return'session_'+Math.random().toString(36).substr(2,9)+'_'+Date.now();};// Load previous messages from this session\nconst loadSessionHistory=async sessionId=>{try{const history=await apiService.getSessionHistory(sessionId);if(history.messages&&history.messages.length>0){// Debug: Log the loaded messages to see their structure\nconsole.log('Loaded messages from history:',history.messages);// Ensure all messages have valid timestamps and text content\nconst messagesWithValidTimestamps=history.messages.map(message=>_objectSpread(_objectSpread({},message),{},{timestamp:message.timestamp||new Date().toISOString(),text:message.text||message.content||message.message||'Message content not available'}));console.log('Processed messages:',messagesWithValidTimestamps);setMessages(messagesWithValidTimestamps);}}catch(error){console.error('Failed to load session history:',error);}};// Scroll the chat to the bottom smoothly\nconst scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};// This function handles when the user sends a message\nconst handleSendMessage=async messageText=>{// Don't send empty messages or if we're already processing one\nif(!messageText.trim()||isLoading)return;// Create the user's message object\nconst userMessage={id:Date.now(),text:messageText,role:'user',timestamp:new Date().toISOString()};// Add the user's message to the chat immediately\nsetMessages(prev=>[...prev,userMessage]);setIsLoading(true);setIsTyping(true);try{// Send the message to the backend and get the bot's response\nconst response=await apiService.sendMessage(sessionId,messageText);// Add a realistic delay so it feels like the bot is thinking\nsetTimeout(()=>{const botMessage={id:Date.now()+1,text:response.reply,role:'assistant',timestamp:new Date().toISOString(),citations:response.citations||[]// Include any sources the bot found\n};// Add the bot's response to the chat\nsetMessages(prev=>[...prev,botMessage]);setIsTyping(false);setIsLoading(false);},1000+Math.random()*2000);// Random delay between 1-3 seconds\n}catch(error){// If something goes wrong, show an error message\nconsole.error('Error sending message:',error);const errorMessage={id:Date.now()+1,text:'Sorry, I encountered an error. Please try again.',role:'assistant',timestamp:new Date().toISOString(),isError:true};setMessages(prev=>[...prev,errorMessage]);setIsTyping(false);setIsLoading(false);}};// This function clears the chat and starts fresh\nconst handleResetSession=async()=>{if(!sessionId)return;try{// Tell the backend to forget this session\nawait apiService.resetSession(sessionId);// Clear all messages from the screen\nsetMessages([]);// Create a brand new session ID\nconst newSessionId=generateSessionId();setSessionId(newSessionId);localStorage.setItem('news-session-id',newSessionId);}catch(error){console.error('Error resetting session:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-screen\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"News Bot\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Ask me anything about the latest news!\"}),/*#__PURE__*/_jsx(ResetButton,{onReset:handleResetSession})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages}),isTyping&&/*#__PURE__*/_jsx(TypingIndicator,{}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-input\",children:/*#__PURE__*/_jsx(MessageInput,{onSendMessage:handleSendMessage,disabled:isLoading// Disable input while bot is responding\n})})]});};export default ChatScreen;","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageList","MessageInput","ResetButton","TypingIndicator","apiService","jsx","_jsx","jsxs","_jsxs","ChatScreen","messages","setMessages","sessionId","setSessionId","isLoading","setIsLoading","isTyping","setIsTyping","messagesEndRef","storedSessionId","localStorage","getItem","loadSessionHistory","newSessionId","generateSessionId","setItem","scrollToBottom","Math","random","toString","substr","Date","now","history","getSessionHistory","length","console","log","messagesWithValidTimestamps","map","message","_objectSpread","timestamp","toISOString","text","content","error","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","messageText","trim","userMessage","id","role","prev","response","sendMessage","setTimeout","botMessage","reply","citations","errorMessage","isError","handleResetSession","resetSession","className","children","onReset","ref","onSendMessage","disabled"],"sources":["/Users/daminisingla/Desktop/news_frontend/frontend/src/components/ChatScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport ResetButton from './ResetButton';\nimport TypingIndicator from './TypingIndicator';\nimport apiService from '../services/api';\nimport './ChatScreen.scss';\n\n// This is the main chat component that handles the entire conversation\nconst ChatScreen = () => {\n  // State variables to keep track of everything\n  const [messages, setMessages] = useState([]);        // All the chat messages\n  const [sessionId, setSessionId] = useState(null);    // Unique ID for this chat session\n  const [isLoading, setIsLoading] = useState(false);   // Is the bot thinking?\n  const [isTyping, setIsTyping] = useState(false);     // Show typing animation\n  const messagesEndRef = useRef(null);                 // Reference to scroll to bottom\n\n  // When the component first loads, check if we have a saved chat session\n  useEffect(() => {\n    const storedSessionId = localStorage.getItem('news-session-id');\n    if (storedSessionId) {\n      // We have a previous session, load it up\n      setSessionId(storedSessionId);\n      loadSessionHistory(storedSessionId);\n    } else {\n      // No previous session, create a new one\n      const newSessionId = generateSessionId();\n      setSessionId(newSessionId);\n      localStorage.setItem('news-session-id', newSessionId);\n    }\n  }, []);\n\n  // Every time messages change, scroll to the bottom to show the latest\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Create a unique ID for this chat session\n  const generateSessionId = () => {\n    return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  };\n\n  // Load previous messages from this session\n  const loadSessionHistory = async (sessionId) => {\n    try {\n      const history = await apiService.getSessionHistory(sessionId);\n      if (history.messages && history.messages.length > 0) {\n        // Debug: Log the loaded messages to see their structure\n        console.log('Loaded messages from history:', history.messages);\n        \n        // Ensure all messages have valid timestamps and text content\n        const messagesWithValidTimestamps = history.messages.map(message => ({\n          ...message,\n          timestamp: message.timestamp || new Date().toISOString(),\n          text: message.text || message.content || message.message || 'Message content not available'\n        }));\n        \n        console.log('Processed messages:', messagesWithValidTimestamps);\n        setMessages(messagesWithValidTimestamps);\n      }\n    } catch (error) {\n      console.error('Failed to load session history:', error);\n    }\n  };\n\n  // Scroll the chat to the bottom smoothly\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  // This function handles when the user sends a message\n  const handleSendMessage = async (messageText) => {\n    // Don't send empty messages or if we're already processing one\n    if (!messageText.trim() || isLoading) return;\n\n    // Create the user's message object\n    const userMessage = {\n      id: Date.now(),\n      text: messageText,\n      role: 'user',\n      timestamp: new Date().toISOString()\n    };\n\n    // Add the user's message to the chat immediately\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setIsTyping(true);\n\n    try {\n      // Send the message to the backend and get the bot's response\n      const response = await apiService.sendMessage(sessionId, messageText);\n      \n      // Add a realistic delay so it feels like the bot is thinking\n      setTimeout(() => {\n        const botMessage = {\n          id: Date.now() + 1,\n          text: response.reply,\n          role: 'assistant',\n          timestamp: new Date().toISOString(),\n          citations: response.citations || []  // Include any sources the bot found\n        };\n        \n        // Add the bot's response to the chat\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        setIsLoading(false);\n      }, 1000 + Math.random() * 2000); // Random delay between 1-3 seconds\n\n    } catch (error) {\n      // If something goes wrong, show an error message\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: 'Sorry, I encountered an error. Please try again.',\n        role: 'assistant',\n        timestamp: new Date().toISOString(),\n        isError: true\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n      setIsTyping(false);\n      setIsLoading(false);\n    }\n  };\n\n  // This function clears the chat and starts fresh\n  const handleResetSession = async () => {\n    if (!sessionId) return;\n\n    try {\n      // Tell the backend to forget this session\n      await apiService.resetSession(sessionId);\n      // Clear all messages from the screen\n      setMessages([]);\n      \n      // Create a brand new session ID\n      const newSessionId = generateSessionId();\n      setSessionId(newSessionId);\n      localStorage.setItem('news-session-id', newSessionId);\n    } catch (error) {\n      console.error('Error resetting session:', error);\n    }\n  };\n\n  return (\n    <div className=\"chat-screen\">\n      {/* Header with title and reset button */}\n      <div className=\"chat-header\">\n        <h1>News Bot</h1>\n        <p>Ask me anything about the latest news!</p>\n        <ResetButton onReset={handleResetSession} />\n      </div>\n      \n      {/* The main chat area where messages appear */}\n      <div className=\"chat-messages\">\n        <MessageList messages={messages} />\n        {/* Show typing animation when bot is thinking */}\n        {isTyping && <TypingIndicator />}\n        {/* Invisible div to scroll to */}\n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input area where user types messages */}\n      <div className=\"chat-input\">\n        <MessageInput \n          onSendMessage={handleSendMessage} \n          disabled={isLoading}  // Disable input while bot is responding\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}